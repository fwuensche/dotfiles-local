snippet allow
allow(${1:object}).to receive(:${2:method})
endsnippet

snippet allowr
allow(${1:object}).to receive(:${2:method}) { ${3:return_value} }
endsnippet

snippet bef
before(:${1:each}) do
	${2}
end
endsnippet

snippet bt
belongs_to :${1:association}
endsnippet

snippet cls
class ${1:`substitute(substitute(Filename(), '\C\(_\)\=\(.\)','\=submatch(1)==""?tolower(submatch(2)) : toupper(submatch(2))','g'),'^.','\u&','')`}
end
endsnippet

snippet cont
context "${1:message}" do
	${2}
end
endsnippet

snippet descm
describe "${1:method_or_behavior}" do
	${2:pending # document the behavior}
end
endsnippet

snippet descc
RSpec.describe ${1:`substitute(substitute(strpart(Filename(), 0, strridx(Filename(), "_spec")), '\C\(_\)\=\(.\)','\=submatch(1)==""?tolower(submatch(2)) : toupper(submatch(2))','g'),'^.','\u&','')`} do
	  ${2:pending # document the behavior}
end
endsnippet

snippet .ead
.each do |${1:thing}|
	${2}
end
endsnippet

snippet exp
expect(${1:object}).to ${2:matcher}
endsnippet

snippet expw
expect(${1:object}).to have_received(:${2:method}).with(${3:arguments})
endsnippet

snippet if
if ${1:condition}
	${2}
end
endsnippet

snippet itd
it "${1:does that}" do
	${2:pending # document the behavior}
end
endsnippet

snippet its
it { should ${1:behave_this_way} }
endsnippet

snippet itshdb
it { should have_db_index(:${1:column})${2} }
endsnippet

snippet itsv
it { should validate_${1:evaluation_aspect}(:${2:thing_to_evaluate})${3} }
endsnippet

snippet itsvp
it { should validate_presence_of(:${1:attribute}) }
endsnippet

snippet itsbt
it { should belong_to(:${1:parent}) }
endsnippet

snippet itshm
it { should have_many(:${1:children}) }
endsnippet

snippet let
let(:${1:object}) ${2}
endsnippet

snippet .mapd
.map do |${1:method}|
endsnippet

snippet .maps
.map(&:${1:method})
endsnippet

snippet .pluck
.pluck(:${1:attribute})
endsnippet

snippet prt
protected
endsnippet

snippet prv
private
endsnippet


snippet r
attr_reader :${1:attribute}
endsnippet

snippet rsh
require "spec_helper"
endsnippet
